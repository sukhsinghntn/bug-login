@using Microsoft.AspNetCore.Components
@using DynamicFormsApp.Shared

<div class="card mb-3 shadow-sm field-card" @attributes="AdditionalAttributes">
    <div class="card-body">

        <div class="d-flex justify-content-between mb-2">
            <div class="d-flex align-items-center gap-2">
                <span class="drag-handle text-muted"><i class="bi bi-grip-vertical fs-4"></i></span>
                <input class="form-control form-control-sm" placeholder="Field label" @bind="Field.Label" />
            </div>
            <div class="d-flex gap-2">
                <button class="btn btn-sm btn-outline-secondary" @onclick="() => OnDuplicate.InvokeAsync(Field)">
                    <i class="bi bi-copy"></i>
                </button>
                <button class="btn btn-sm btn-outline-danger" @onclick="() => OnRemove.InvokeAsync(Field)">
                    <i class="bi bi-trash"></i>
                </button>
            </div>
        </div>

        <div class="row g-2">
            <div class="col-md-4">
                <input class="form-control" placeholder="Field key" @bind="Field.Key" />
            </div>
            <div class="col-md-4">
                <select class="form-select" @bind="Field.FieldType">
                    <option value="text">Short Answer</option>
                    <option value="textarea">Paragraph</option>
                    <option value="radio">Multiple Choice</option>
                    <option value="checkbox">Checkbox</option>
                    <option value="dropdown">Dropdown</option>
                    <option value="date">Date</option>
                    <option value="time">Time</option>
                    <option value="datetime">Date Time</option>
                    <option value="scale">Linear Scale</option>
                    <option value="grid_radio">Multiple Choice Grid</option>
                    <option value="grid_checkbox">Checkbox Grid</option>
                    <option value="title">Title</option>
                    <option value="section">Section</option>
                    <option value="file">Upload File</option>
                </select>
            </div>
        </div>

        @if (Field.FieldType is "radio" or "checkbox" or "dropdown")
        {
            <label class="form-label mt-3">Options</label>
            @foreach (var (opt, index) in Field.OptionItems.Select((val, idx) => (val, idx)))
            {
                <div class="input-group mb-1">
                    <input class="form-control" value="@opt" @onchange="e => Field.OptionItems[index] = e.Value?.ToString() ?? string.Empty" />
                    <button class="btn btn-outline-danger" @onclick="() => Field.OptionItems.RemoveAt(index)">×</button>
                </div>
            }

            <button class="btn btn-sm btn-outline-primary" @onclick="() => Field.OptionItems.Add(string.Empty)">
                + Add Option
            </button>
        }
        else if (Field.FieldType.StartsWith("grid"))
        {
            <div class="row mt-3">
                <div class="col-md-6">
                    <label class="form-label">Grid Rows</label>
                    @foreach (var (row, idx) in Field.GridRows.Select((r, i) => (r, i)))
                    {
                        <div class="input-group mb-1">
                            <input class="form-control" @bind="Field.GridRows[idx]" />
                            <button class="btn btn-outline-danger" @onclick="() => Field.GridRows.RemoveAt(idx)">×</button>
                        </div>
                    }
                    <button class="btn btn-sm btn-outline-primary" @onclick="() => Field.GridRows.Add(string.Empty)">
                        + Add Row
                    </button>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Grid Columns</label>
                    @foreach (var (col, idx) in Field.GridColumns.Select((c, i) => (c, i)))
                    {
                        <div class="input-group mb-1">
                            <input class="form-control" @bind="Field.GridColumns[idx]" />
                            <button class="btn btn-outline-danger" @onclick="() => Field.GridColumns.RemoveAt(idx)">×</button>
                        </div>
                    }
                    <button class="btn btn-sm btn-outline-primary" @onclick="() => Field.GridColumns.Add(string.Empty)">
                        + Add Column
                    </button>
                </div>
            </div>
        }
        else if (Field.FieldType == "scale")
        {
            <div class="row mt-3">
                <div class="col">
                    <label>Scale Min</label>
                    <input type="number" class="form-control" @bind="Field.ScaleMin" />
                </div>
                <div class="col">
                    <label>Scale Max</label>
                    <input type="number" class="form-control" @bind="Field.ScaleMax" />
                </div>
            </div>
        }

        <div class="form-check mt-3">
            <input class="form-check-input" type="checkbox" @bind="Field.IsRequired" />
            <label class="form-check-label">Required</label>
        </div>
    </div>
</div>

@code {
    [Parameter] public DesignerField Field { get; set; }
    [Parameter] public EventCallback<DesignerField> OnRemove { get; set; }
    [Parameter] public EventCallback<DesignerField> OnDuplicate { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; } = new();
}
