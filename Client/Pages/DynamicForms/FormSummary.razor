@page "/forms/{FormId:int}/summary"
@using System.Net.Http.Json
@using System.Text.Json
@using DynamicFormsApp.Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CookieHelper CookieHelper

<h3>Summary for @form?.Name</h3>

@if (form == null || responses == null)
{
    <p>Loading summary...</p>
}
else if (!responses.Any())
{
    <p>No responses yet.</p>
}
else
{
    @foreach (var field in form.Fields)
    {
        <div class="mb-4">
            <h5>@field.Label</h5>

            @if (field.FieldType == "number")
            {
                var nums = responses.Select(r => TryDouble(r, field.Key)).Where(v => v.HasValue).Select(v => v.Value).ToList();
                if (nums.Any())
                {
                    <p>Avg: @nums.Average().ToString("F2") | Min: @nums.Min() | Max: @nums.Max()</p>
                }
                else
                {
                    <p>No numeric data.</p>
                }
            }
            else if (field.FieldType is "dropdown" or "radio" or "checkbox")
            {
                var allValues = responses.SelectMany(r => ExtractOptions(r, field)).ToList();
                var grouped = allValues.GroupBy(v => v).ToDictionary(g => g.Key, g => g.Count());

                <ul class="list-group">
                    @foreach (var kv in grouped)
                    {
                        <li class="list-group-item d-flex justify-content-between">
                            <span>@kv.Key</span>
                            <span>@kv.Value responses</span>
                        </li>
                    }
                </ul>
            }
            else
            {
                var nonEmpty = responses.Select(r => r.GetValueOrDefault(field.Key)?.ToString()).Where(v => !string.IsNullOrWhiteSpace(v)).Take(5);
                <ul class="list-group">
                    @foreach (var val in nonEmpty)
                    {
                        <li class="list-group-item">@val</li>
                    }
                </ul>
            }
        </div>
    }
}

@code {
    [Parameter] public int FormId { get; set; }

    private Form form;
    private List<Dictionary<string, object>> responses;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = await CookieHelper.LoginStatus();
            if (string.IsNullOrEmpty(user))
            {
                var ret = Uri.EscapeDataString(Navigation.ToBaseRelativePath(Navigation.Uri));
                Navigation.NavigateTo($"login?returnUrl={ret}", true);
                return;
            }

            form = await Http.GetFromJsonAsync<Form>($"api/forms/{FormId}");
            responses = await Http.GetFromJsonAsync<List<Dictionary<string, object>>>($"api/forms/{FormId}/responses");

            StateHasChanged();
        }
    }

    private double? TryDouble(Dictionary<string, object> row, string key)
    {
        if (row.TryGetValue(key, out var val) && double.TryParse(val?.ToString(), out var d))
            return d;
        return null;
    }

    private IEnumerable<string> ExtractOptions(Dictionary<string, object> row, FormField field)
    {
        if (!row.TryGetValue(field.Key, out var val) || val is null)
            return Enumerable.Empty<string>();

        if (field.FieldType == "checkbox")
        {
            if (val is JsonElement je && je.ValueKind == JsonValueKind.Array)
            {
                return je.EnumerateArray().Select(e => e.GetString()).Where(v => !string.IsNullOrWhiteSpace(v));
            }
            else if (val is IEnumerable<string> strList)
            {
                return strList;
            }
        }

        return new[] { val.ToString() };
    }
}
