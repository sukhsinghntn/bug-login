@page "/forms/{FormId:int}"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using DynamicFormsApp.Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CookieHelper CookieHelper

<h3>@(form?.Name ?? "Loading…")</h3>

@if (form == null)
{
    <p><em>Loading form…</em></p>
}
else
{
    <EditForm Model="@responseData">
        @{
            var groups = form.Fields
                .OrderBy(f => f.Row ?? 0)
                .ThenBy(f => f.Column ?? 0)
                .GroupBy(f => f.Row ?? 0);
        }

        @foreach (var rowGroup in groups)
        {
            <div class="row g-3 mb-3">
            @foreach (var fld in rowGroup)
            {
                <div class="col-md-@(12 / (rowGroup.Count() == 0 ? 1 : rowGroup.Count()))">
                    <div class="mb-3">
                        <label class="form-label">@fld.Label</label>

                @switch (fld.FieldType)
                {
                    case "text":
                        <input type="text" class="form-control"
                               value="@GetString(fld.Key)"
                               @onchange="e => OnTextChanged(fld.Key, e)" />
                        break;

                    case "textarea":
                        <textarea class="form-control"
                                  @onchange="e => OnTextChanged(fld.Key, e)">@GetString(fld.Key)</textarea>
                        break;

                    case "number":
                        <input type="number" class="form-control"
                               value="@GetNumberString(fld.Key)"
                               @onchange="e => OnNumberChanged(fld.Key, e)" />
                        break;

                    case "date":
                        <input type="date" class="form-control"
                               value="@GetDateString(fld.Key)"
                               @onchange="e => OnDateChanged(fld.Key, e)" />
                        break;

                    case "time":
                        <input type="time" class="form-control"
                               value="@GetTimeString(fld.Key)"
                               @onchange="e => OnTimeChanged(fld.Key, e)" />
                        break;

                    case "datetime":
                        <input type="datetime-local" class="form-control"
                               value="@GetDateTimeString(fld.Key)"
                               @onchange="e => OnDateTimeChanged(fld.Key, e)" />
                        break;

                    case "dropdown":
                        var ddOptions = JsonSerializer.Deserialize<List<string>>(fld.OptionsJson ?? "[]");
                        <select class="form-select"
                                @onchange="e => OnTextChanged(fld.Key, e)">
                            @foreach (var opt in ddOptions)
                            {
                                <option value="@opt">@opt</option>
                            }
                        </select>
                        break;

                    case "radio":
                        var radioOptions = JsonSerializer.Deserialize<List<string>>(fld.OptionsJson ?? "[]");
                        foreach (var opt in radioOptions)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="radio"
                                       name="@fld.Key" value="@opt"
                                       @onchange="e => OnTextChanged(fld.Key, e)" />
                                <label class="form-check-label">@opt</label>
                            </div>
                        }
                        break;

                    case "checkbox":
                        var chkOptions = JsonSerializer.Deserialize<List<string>>(fld.OptionsJson ?? "[]");
                        foreach (var opt in chkOptions)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox"
                                       @onchange="e => OnCheckboxChanged(fld.Key, opt, e)" />
                                <label class="form-check-label">@opt</label>
                            </div>
                        }
                        break;

                    case "file":
                        <InputFile OnChange="e => OnFileUploadChanged(fld.Key, e)" />
                        @if (responseData.ContainsKey(fld.Key))
                        {
                            <div class="form-text">Uploaded: @responseData[fld.Key]</div>
                        }
                        break;

                    case "title":
                        <h4>@fld.Label</h4>
                        break;

                    case "section":
                        <hr />
                        <h5>@fld.Label</h5>
                        break;

                    case "scale":
                        var scaleOptions = Enumerable.Range(1, 5); // or use fld.OptionsJson for custom range
                        <div class="d-flex align-items-center gap-3">
                            @foreach (var num in scaleOptions)
                            {
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio"
                                           name="@fld.Key"
                                           value="@num"
                                           checked="@(GetString(fld.Key) == num.ToString())"
                                           @onchange="e => OnTextChanged(fld.Key, e)" />
                                    <label class="form-check-label">@num</label>
                                </div>
                            }
                        </div>
                        break;


                    default:
                        <input type="text" class="form-control"
                               value="@GetString(fld.Key)"
                               @onchange="e => OnTextChanged(fld.Key, e)" />
                        break;
                }
                    </div>
                </div>
            }
            </div>
        }

        <button class="btn btn-success" @onclick="SubmitResponse">Submit</button>
    </EditForm>
}

@code {
    [Parameter] public int FormId { get; set; }

    private Form form;
    private Dictionary<string, object> responseData = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            form = await Http.GetFromJsonAsync<Form>($"api/forms/{FormId}");

            var user = await CookieHelper.LoginStatus();
            if (form.RequireLogin && string.IsNullOrEmpty(user))
            {
                var ret = Uri.EscapeDataString(Navigation.ToBaseRelativePath(Navigation.Uri));
                Navigation.NavigateTo($"login?returnUrl={ret}", true);
                return;
            }

            foreach (var fld in form.Fields)
            {
                responseData[fld.Key] = fld.FieldType switch
                {
                    "checkbox" => new List<string>(),
                    "number" => (object?)null,
                    "date" => (object?)null,
                    "time" => (object?)null,
                    "datetime" => (object?)null,
                    "file" => "",
                    _ => string.Empty
                };
            }

            StateHasChanged();
        }
    }

    string GetString(string key) => responseData[key]?.ToString() ?? "";
    string GetNumberString(string key) => responseData[key] is double d ? d.ToString() : "";
    string GetDateString(string key) => responseData[key] is DateTime dt ? dt.ToString("yyyy-MM-dd") : "";
    string GetTimeString(string key) => responseData[key] is TimeSpan ts ? ts.ToString(@"hh\:mm") : "";
    string GetDateTimeString(string key) => responseData[key] is DateTime dt ? dt.ToString("yyyy-MM-ddTHH:mm") : "";

    void OnTextChanged(string key, ChangeEventArgs e) =>
        responseData[key] = e.Value?.ToString() ?? "";

    void OnNumberChanged(string key, ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out var d))
            responseData[key] = d;
        else
            responseData[key] = null;
    }

    void OnDateChanged(string key, ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var dt))
            responseData[key] = dt.Date;
        else
            responseData[key] = null;
    }

    void OnTimeChanged(string key, ChangeEventArgs e)
    {
        if (TimeSpan.TryParse(e.Value?.ToString(), out var ts))
            responseData[key] = ts;
        else
            responseData[key] = null;
    }

    void OnDateTimeChanged(string key, ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var dt))
            responseData[key] = dt;
        else
            responseData[key] = null;
    }

    void OnCheckboxChanged(string key, string option, ChangeEventArgs e)
    {
        if (!responseData.TryGetValue(key, out var existing) || existing is not List<string> list)
        {
            list = new List<string>();
            responseData[key] = list;
        }

        if ((bool?)e.Value == true)
        {
            if (!list.Contains(option))
                list.Add(option);
        }
        else
        {
            list.Remove(option);
        }
    }

    private async Task OnFileUploadChanged(string key, InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        var content = new MultipartFormDataContent();
        var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
        content.Add(new StreamContent(stream), "file", file.Name);

        var response = await Http.PostAsync("api/FileUpload", content);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<FileUploadResult>();
            responseData[key] = result?.filePath ?? "upload-failed";
        }
        else
        {
            responseData[key] = "upload-failed";
        }
    }

    private async Task SubmitResponse()
    {
        await Http.PostAsJsonAsync($"api/forms/{FormId}/responses", responseData);
        Navigation.NavigateTo($"/forms/{FormId}/responses");
    }

    private class FileUploadResult
    {
        public string filePath { get; set; }
    }
}
