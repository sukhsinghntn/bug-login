@page "/razer"
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CookieHelper CookieHelper

<h2 class="mb-4">Form Builder</h2>

<div class="mb-4">
    <label class="form-label">Form Name</label>
    <input type="text"
           class="form-control form-control-lg"
           placeholder="Enter your form title"
           @bind="formName" />
</div>

<div class="form-check form-switch mb-4">
    <input class="form-check-input" type="checkbox" id="loginToggle" @bind="requireLogin" />
    <label class="form-check-label" for="loginToggle">Require login to access form</label>
</div>
<div class="form-check form-switch mb-4">
    <input class="form-check-input" type="checkbox" id="notifyToggle" @bind="notifyOnResponse" />
    <label class="form-check-label" for="notifyToggle">Email on new response</label>
</div>

@foreach (var field in fields)
{
    <div class="card mb-3 shadow-sm border-start border-5 border-primary">
        <div class="card-body">
            <div class="d-flex justify-content-between">
                <input type="text"
                       class="form-control form-control-sm mb-2"
                       placeholder="Question/Label"
                       @bind="field.Label" />
                <button class="btn btn-outline-danger btn-sm" @onclick="() => RemoveField(field)">
                    <i class="bi bi-trash"></i>
                </button>
            </div>

            <div class="row g-2 align-items-center">
                <div class="col-md-4">
                    <input type="text" class="form-control" placeholder="Field key" @bind="field.Key" />
                </div>
                <div class="col-md-4">
                    <select class="form-select" @bind="field.FieldType">
                        <option value="text">Short Answer</option>
                        <option value="textarea">Paragraph</option>
                        <option value="radio">Multiple Choice</option>
                        <option value="checkbox">Checkbox</option>
                        <option value="dropdown">Dropdown</option>
                        <option value="date">Date</option>
                        <option value="time">Time</option>
                        <option value="datetime">Date Time</option>
                        <option value="scale">Linear Scale</option>
                        <option value="grid_radio">Multiple Choice Grid</option>
                        <option value="grid_checkbox">Checkbox Grid</option>
                        <option value="title">Title and Description</option>
                        <option value="section">Section</option>
                        <option value="file">Upload File</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <input type="text" class="form-control"
                           placeholder="Options (comma-separated)"
                           @bind="field.Options" />
                </div>
            </div>

            <div class="form-check mt-2">
                <input class="form-check-input" type="checkbox" @bind="field.IsRequired" />
                <label class="form-check-label">Required</label>
            </div>
        </div>
    </div>
}

<div class="d-grid mb-3">
    <button class="btn btn-outline-secondary" @onclick="AddField">
        + Add New Field
    </button>
</div>

<div class="d-grid">
    <button class="btn btn-primary btn-lg" @onclick="HandleSubmit">
        Create Form
    </button>
</div>

@code {
    private string formName = string.Empty;
    private List<DesignerField> fields = new();
    private bool requireLogin = true;
    private bool notifyOnResponse = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = await CookieHelper.LoginStatus();
            if (string.IsNullOrEmpty(user))
            {
                var ret = Uri.EscapeDataString(Navigation.ToBaseRelativePath(Navigation.Uri));
                Navigation.NavigateTo($"login?returnUrl={ret}", true);
            }
        }
    }

    class DesignerField
    {
        public string Key { get; set; } = string.Empty;
        public string Label { get; set; } = string.Empty;
        public string FieldType { get; set; } = "text";
        public string Options { get; set; } = "";
        public bool IsRequired { get; set; }
    }

    void AddField() => fields.Add(new DesignerField());
    void RemoveField(DesignerField field) => fields.Remove(field);

    async Task HandleSubmit()
    {
        var payload = new
        {
            Name = formName,
            RequireLogin = requireLogin,
            NotifyOnResponse = notifyOnResponse,
            Fields = fields.Select(f => new
            {
                Key = f.Key,
                Label = f.Label,
                FieldType = f.FieldType,
                IsRequired = f.IsRequired,
                OptionsJson = string.IsNullOrWhiteSpace(f.Options)
                    ? null
                    : JsonSerializer.Serialize(
                        f.Options.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
                    )
            }).ToList()
        };

        var resp = await Http.PostAsJsonAsync("api/forms", payload);
        if (resp.IsSuccessStatusCode)
        {
            var wrapper = await resp.Content.ReadFromJsonAsync<JsonElement>();
            int newId = wrapper.GetProperty("formId").GetInt32();
            Navigation.NavigateTo($"/forms/{newId}");
        }
        else
        {
            // TODO: Error alert
        }
    }
}
