@page "/forms/new"
@using System.Net.Http.Json
@using System.Text.Json
@using DynamicFormsApp.Client.Components
@using DynamicFormsApp.Shared
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CookieHelper CookieHelper

@implements IDisposable

<h2 class="mb-4">Form Builder</h2>

<div class="form-check form-switch mb-4">
    <input class="form-check-input" type="checkbox" id="previewToggle" @bind="isPreviewMode" />
    <label class="form-check-label" for="previewToggle">Preview Mode</label>
</div>

<div class="mb-4">
    <label class="form-label">Form Name</label>
    <input class="form-control form-control-lg" placeholder="Enter your form title" @bind="formName" />
</div>

<div class="form-check form-switch mb-4">
    <input class="form-check-input" type="checkbox" id="loginToggle" @bind="requireLogin" />
    <label class="form-check-label" for="loginToggle">Require login to access form</label>
</div>
<div class="form-check form-switch mb-4">
    <input class="form-check-input" type="checkbox" id="notifyToggle" @bind="notifyOnResponse" />
    <label class="form-check-label" for="notifyToggle">Email on new response</label>
</div>

@if (!isPreviewMode)
{
    <div class="row">
        <div class="col-md-3">
            <h5 class="mb-3">Toolbox</h5>
            <div class="d-flex flex-column gap-2">
                <div class="draggable-field" draggable="true" data-type="text"><span class="material-icons me-1">short_text</span> Short Answer</div>
                <div class="draggable-field" draggable="true" data-type="textarea"><span class="material-icons me-1">notes</span> Paragraph</div>
                <div class="draggable-field" draggable="true" data-type="radio"><span class="material-icons me-1">radio_button_checked</span> Multiple Choice</div>
                <div class="draggable-field" draggable="true" data-type="checkbox"><span class="material-icons me-1">check_box</span> Checkbox</div>
                <div class="draggable-field" draggable="true" data-type="dropdown"><span class="material-icons me-1">arrow_drop_down_circle</span> Dropdown</div>
                <div class="draggable-field" draggable="true" data-type="date"><span class="material-icons me-1">event</span> Date</div>
                <div class="draggable-field" draggable="true" data-type="time"><span class="material-icons me-1">schedule</span> Time</div>
                <div class="draggable-field" draggable="true" data-type="datetime"><span class="material-icons me-1">event_available</span> Date Time</div>
                <div class="draggable-field" draggable="true" data-type="scale"><span class="material-icons me-1">linear_scale</span> Linear Scale</div>
                <div class="draggable-field" draggable="true" data-type="grid_radio"><span class="material-icons me-1">grid_on</span> Choice Grid</div>
                <div class="draggable-field" draggable="true" data-type="grid_checkbox"><span class="material-icons me-1">grid_view</span> Checkbox Grid</div>
                <div class="draggable-field" draggable="true" data-type="title"><span class="material-icons me-1">title</span> Title</div>
                <div class="draggable-field" draggable="true" data-type="section"><span class="material-icons me-1">view_headline</span> Section</div>
                <div class="draggable-field" draggable="true" data-type="file"><span class="material-icons me-1">upload_file</span> Upload File</div>
            </div>
        </div>
        <div class="col-md-9">
            <div id="fields-container">
                @for (int r = 0; r < rows.Count; r++)
                {
                    var rowIndex = r;
                    <div class="row-dropzone" data-insert="@rowIndex"></div>
                    <div class="row g-3 mb-3 designer-row" data-row="@rowIndex">
                        @for (int i = 0; i < rows[rowIndex].Fields.Count; i++)
                        {
                            <div class="col-md-@(12 / (rows[rowIndex].Fields.Count == 0 ? 1 : rows[rowIndex].Fields.Count))" data-id="@i">
                                <FieldEditor Field="rows[rowIndex].Fields[i]"
                                             OnRemove="f => RemoveField(rowIndex, f)"
                                             OnDuplicate="f => DuplicateField(rowIndex, f)" />
                            </div>
                        }
                        <div class="col-12">
                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => AddField(rowIndex)">+ Add Column</button>
                        </div>
                    </div>
                }
                <div class="row-dropzone" data-insert="@rows.Count"></div>
                <div class="d-grid mb-3">
                    <button class="btn btn-outline-secondary" @onclick="AddRow">+ Add Row</button>
                </div>
                <div class="d-grid">
                    <button class="btn btn-primary btn-lg" @onclick="HandleSubmit">Create Form</button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="card p-3 shadow-sm">
        <LivePreview Rows="rows" />
    </div>
}

@code {
    private string formName = string.Empty;
    private List<DesignerRow> rows = new() { new DesignerRow() };
    private bool isPreviewMode = false;
    private bool requireLogin = true;
    private bool notifyOnResponse = false;
    private DotNetObjectReference<Index>? objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = await CookieHelper.LoginStatus();
            if (string.IsNullOrEmpty(user))
            {
                var ret = Uri.EscapeDataString(Navigation.ToBaseRelativePath(Navigation.Uri));
                Navigation.NavigateTo($"login?returnUrl={ret}", true);
                return;
            }

            objRef ??= DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initSortable", "#fields-container", objRef);
            await JS.InvokeVoidAsync("initFieldDragDrop", "#fields-container", objRef);
        }
    }

    [JSInvokable]
    public void OnSortUpdate(int fromRow, int oldIndex, int toRow, int newIndex)
    {
        if (fromRow < 0 || fromRow >= rows.Count || toRow < 0 || toRow >= rows.Count)
            return;

        var source = rows[fromRow].Fields;
        var dest = rows[toRow].Fields;

        if (oldIndex < 0 || oldIndex >= source.Count || newIndex < 0 || newIndex > dest.Count)
            return;

        var moved = source[oldIndex];
        source.RemoveAt(oldIndex);
        dest.Insert(newIndex, moved);
        StateHasChanged();
    }

    void AddRow() => rows.Add(new DesignerRow());

    void AddField(int row) => rows[row].Fields.Add(new DesignerField());

    void RemoveField(int row, DesignerField field) => rows[row].Fields.Remove(field);

    void DuplicateField(int row, DesignerField field)
    {
        var copy = new DesignerField
        {
            Key = field.Key + "_copy",
            Label = field.Label,
            FieldType = field.FieldType,
            IsRequired = field.IsRequired,
            OptionItems = new List<string>(field.OptionItems),
            GridColumns = new List<string>(field.GridColumns),
            GridRows = new List<string>(field.GridRows),
            ScaleMin = field.ScaleMin,
            ScaleMax = field.ScaleMax
        };
        var list = rows[row].Fields;
        list.Insert(list.IndexOf(field) + 1, copy);
    }

    [JSInvokable]
    public void AddFieldFromDrop(string fieldType, int rowIndex, int colIndex)
    {
        if (rowIndex < 0 || rowIndex >= rows.Count)
            rowIndex = rows.Count - 1;

        var list = rows[rowIndex].Fields;
        var field = new DesignerField { FieldType = fieldType };

        if (colIndex < 0 || colIndex > list.Count)
            list.Add(field);
        else
            list.Insert(colIndex, field);

        StateHasChanged();
    }

    [JSInvokable]
    public void AddRowFromDrop(string fieldType, int insertIndex)
    {
        if (insertIndex < 0 || insertIndex > rows.Count)
            insertIndex = rows.Count;

        var row = new DesignerRow();
        row.Fields.Add(new DesignerField { FieldType = fieldType });
        rows.Insert(insertIndex, row);
        StateHasChanged();
    }

    async Task HandleSubmit()
    {
        var payload = new
        {
            Name = formName,
            RequireLogin = requireLogin,
            NotifyOnResponse = notifyOnResponse,
            Fields = rows.SelectMany((row, rIdx) => row.Fields.Select((f, cIdx) => new
            {
                f.Key,
                f.Label,
                f.FieldType,
                f.IsRequired,
                Row = rIdx,
                Column = cIdx,
                OptionsJson = JsonSerializer.Serialize(
                    f.OptionItems.Count > 0 ? f.OptionItems :
                    f.GridRows.Count > 0 || f.GridColumns.Count > 0 ? new { Rows = f.GridRows, Columns = f.GridColumns } :
                    f.FieldType == "scale" ? new { Min = f.ScaleMin, Max = f.ScaleMax } : new object()
                )
            })).ToList()
        };

        var resp = await Http.PostAsJsonAsync("api/forms", payload);
        if (resp.IsSuccessStatusCode)
        {
            var wrapper = await resp.Content.ReadFromJsonAsync<JsonElement>();
            int newId = wrapper.GetProperty("formId").GetInt32();
            Navigation.NavigateTo($"/forms/{newId}");
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}
