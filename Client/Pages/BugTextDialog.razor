@page "/bugtextdialog"
@using DynamicFormsApp.Shared.Models
@using Microsoft.AspNetCore.Components.Forms
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject DynamicFormsApp.Shared.Services.IEmailService EmailService

<RadzenCard Style="width:100%; max-height:80vh; display:flex; flex-direction:column;">

    <!-- Header -->
    <RadzenRow>
        <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.H3">
            Enter Bug Description and Attach Files
        </RadzenText>
    </RadzenRow>

    <!-- Scrollable content -->
    <div style="overflow-y:auto; flex:1; padding-right:1rem;">

        <!-- Description -->
        <RadzenRow>
            <RadzenTextArea @bind-Value="BugDescriptionText"
                            Style="width:100%;"
                            Rows="4" />
        </RadzenRow>

        <!-- File picker -->
        <RadzenRow Style="margin-top:10px;">
            <InputFile multiple OnChange="OnInputFileChange" />
        </RadzenRow>

        <!-- Attachment previews -->
        <RadzenRow Style="margin-top:10px;">
            <div style="display:flex; flex-wrap:wrap; gap:10px;">
                @foreach (var att in Attachments)
                {
                    <div style="position:relative; width:100px; text-align:center;">
                        @if (IsImage(att.Name))
                        {
                            <img src="@GetImageSrc(att)"
                                 style="max-width:100%; max-height:80px; border:1px solid #666; border-radius:4px;" />
                        }
                        else
                        {
                            <div style="font-size:0.8rem; word-break:break-all;">
                                @att.Name
                            </div>
                        }
                        <RadzenButton Icon="close"
                                      Size="ButtonSize.Small"
                                      ButtonStyle="ButtonStyle.Danger"
                                      Style="position:absolute; top:-6px; right:-6px; padding:2px 4px;"
                                      Click="() => RemoveAttachment(att)" />
                    </div>
                }
            </div>
        </RadzenRow>

    </div>

    <!-- Footer buttons -->
    <RadzenRow Style="margin-top:10px; border-top:1px solid #444; padding-top:10px;">
        <RadzenColumn Style="text-align:left">
            <RadzenButton Text="Cancel"
                          ButtonStyle="ButtonStyle.Danger"
                          Click="OnCancel" />
        </RadzenColumn>
        <RadzenColumn Style="text-align:right">
            <RadzenButton Text="Send"
                          ButtonStyle="ButtonStyle.Success"
                          Click="OnConfirm" />
        </RadzenColumn>
    </RadzenRow>

</RadzenCard>

@code {
    [Parameter] public List<EmailAttachment>? InitialAttachments { get; set; }

    string BugDescriptionText { get; set; } = string.Empty;
    private string username;
    private UserModel ValidUser;
    List<EmailAttachment> Attachments { get; set; } = new();
    private bool waitingforuserload = false;

    protected override void OnInitialized()
    {
        if (InitialAttachments?.Any() == true)
        {
            Attachments.AddRange(InitialAttachments);
            foreach (var att in InitialAttachments)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Info,
                        Summary = "Screenshot Added",
                        Detail = att.Name
                    });
            }
        }
    }


    // Lifecycle method that runs after the component has been rendered
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FetchUsernameAsync(); // Fetch username data on the first render
            StateHasChanged(); // Request a re-render to update the UI
        }
    }
    // Fetches the username of the currently logged-in user from the cookie
    private async Task FetchUsernameAsync()
    {
        string userId = await CookieHelper.LoginStatus();
        if (string.IsNullOrEmpty(userId))
        {
            username = null;
        }
        else
        {
            ValidUser = await UserService.GetUserData(userId);
            username = ValidUser.DisplayName;
        }
        waitingforuserload = true; // Mark the user data as loaded
    }

    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            using var ms = new MemoryStream();
            await file.OpenReadStream(15 * 1024 * 1024).CopyToAsync(ms);
            var att = new EmailAttachment { Name = file.Name, Content = ms.ToArray() };
            Attachments.Add(att);

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Info,
                    Summary = "File Added",
                    Detail = file.Name
                });
        }
    }

    void RemoveAttachment(EmailAttachment att)
    {
        Attachments.Remove(att);
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "File Removed",
                Detail = att.Name
            });
    }

    bool IsImage(string fileName)
    {
        var ext = Path.GetExtension(fileName).ToLowerInvariant();
        return ext is ".png" or ".jpg" or ".jpeg" or ".gif" or ".bmp";
    }

    string GetImageSrc(EmailAttachment att)
      => $"data:{GetMimeType(att.Name)};base64,{Convert.ToBase64String(att.Content)}";

    string GetMimeType(string fileName)
    {
        var ext = Path.GetExtension(fileName).ToLowerInvariant();
        return ext switch
        {
            ".png" => "image/png",
            ".jpg" or ".jpeg" => "image/jpeg",
            ".gif" => "image/gif",
            ".bmp" => "image/bmp",
            _ => "application/octet-stream"
        };
    }

    async Task OnConfirm()
    {
        if (string.IsNullOrWhiteSpace(BugDescriptionText))
        {
            await DialogService.Alert("Please enter a bug description.", "Missing Data");
            return;
        }

        var model = new EmailModel
            {
                Body = BugDescriptionText,
                Link = NavigationManager.Uri,
                UserName = "test",
                Attachments = Attachments
            };

        await EmailService.SendBugReportEmail(model);
        DialogService.Close(model);
    }

    void OnCancel() => DialogService.Close();
}
